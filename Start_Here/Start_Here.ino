//***************************************************
// 
// Teensy Synth DIY Workshop v. Nov 2022
//
// This is a template file which contains some useful
// "preparatory" code for 
// 
//
// Connection to Teensy:
//
//  Pin G  --> ground bus
//  Pin 3v --> 3v bus
//
//  Pin 5v --> dac board Vcc
//  Pin 20 --> dac board LCK
//  Pin 21 --> dac board BCK
//  Pin 7  --> dac board DIN
//
//  Pin 14 --> Potentiometer OSC GAIN 
//  Pin 15 --> Potentiometer OSC FREQ
//  Pin 16 --> Potentiometer FILTER CUTOFF
//  Pin 17 --> Potentiometer LFO RATE
//  Pin 18 --> Potentiometer SEQUENCER SPEED
//  Pin 19 --> Potentiometer SEQUENCER OCTAVES RANGE
//   [all connections to pots central pin]
//
//  Pin 1 --> Button 1 FM on/off
//  Pin 2 --> Button 2 Cutoff Modulation on/off
//  Pin 3 --> Button 3 Sequencer on/off
//  [the other pin of each button --> Ground]
//
//  Pin 5 --> resistor --> LED+
//  Led- --> Ground
//
//  dac board SCK --> Ground bus
//  dac board XMT --> 3v bus
//  dac board GND,FMT,SCL,DMP,FLT --> Ground bus
//
//***************************************************

// useful headers - do not remove
// make shure this file is in the same folder 
#include "DIYSynthWorkshop.h"  
#include <Bounce.h>


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Paste here the code generated by the AudioDesign Tool
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#include <Audio.h>
#include <Wire.h>
#include <SPI.h>
#include <SD.h>
#include <SerialFlash.h>

// GUItool: begin automatically generated code
AudioSynthWaveform       lfo;      //xy=71.99999237060547,460.9999465942383
AudioAmplifier           lfo2osc;           //xy=176.25000381469727,361.9999752044678
AudioAmplifier           lfo2filter;           //xy=280,502.5
AudioAnalyzeRMS          rms1;           //xy=291.25000762939453,588.7500085830688
AudioSynthWaveformModulated osc;   //xy=354.50000381469727,359.7499752044678
AudioFilterStateVariable filter1;        //xy=510.7499580383301,367.24996185302734
AudioOutputI2S           i2s1;           //xy=646.7499389648438,363.74994468688965
AudioConnection          patchCord1(lfo, lfo2osc);
AudioConnection          patchCord2(lfo, lfo2filter);
AudioConnection          patchCord3(lfo, rms1);
AudioConnection          patchCord4(lfo2osc, 0, osc, 0);
AudioConnection          patchCord5(lfo2filter, 0, filter1, 1);
AudioConnection          patchCord6(osc, 0, filter1, 0);
AudioConnection          patchCord7(filter1, 0, i2s1, 0);
AudioConnection          patchCord8(filter1, 0, i2s1, 1);
// GUItool: end automatically generated code


// Buttons
Bounce button1 = Bounce(1,5);
bool button1State = 0;

Bounce button2 = Bounce(2,5);
bool button2State = 0;

// declare the Sequencer 
RandomPitchSequencer sequencer;


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Setup: The stuff in here is executed only once at startup
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
void setup() {

   // Setup input knobs to control the synth parameters
  setupKnobs();
  
  // Setup serial communication with your laptop to print debug info
  Serial.begin(9600);

   // Allocate memory for the audio processing - do not remove this line!
  // note: you may need to increase this value later on
  AudioMemory(50);

  // **** Your setup code here ****

  // initialize the oscillator with level, frequency and waveform
  osc.begin( 0.2, 300, WAVEFORM_SAWTOOTH );

  // set the frequency modulation range
  osc.frequencyModulation(2.0);

  filter1.frequency(1000.0);
  filter1.resonance(2.0);
  filter1.octaveControl(4.0);

  // init the LFO with level, freq, waveform
  lfo.begin( 1.0, 1.0, WAVEFORM_SINE );

  // Frequency Modulation (FM)
  lfo2osc.gain(0.0);

  // Cutoff frequency modulation
  lfo2filter.gain(0.0);

  // initialize Button 1
  pinMode(1, INPUT_PULLUP );

  // initialize Button 2
  pinMode(2, INPUT_PULLUP );

  // setup the LED pin
  pinMode(5, OUTPUT);

}


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Loop: The stuff in here is executed continuously
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
void loop() {

  // do not remove this line
  updateKnobs();


  // **** Your code here ****

  // read knob 14 and set osc amplitude
  float value = readKnob(14);
  float gain = map( value, 0.0, 1023.0, 0.0, 1.0 );
  osc.amplitude(gain);


  // get a new pitch from the sequencer
  // first arg is the rate
  // sencond arg is the octave range
  float freq_ratio = sequencer.GetPitch( 10, 12 );
  
  // read knob @ pin 15 and set osc frequency
  float normalized_frequency = map( readKnob(15), 0.0, 1023.0, 0.0, 1.0 );
  float freq = powf( normalized_frequency, 4 ) * 3000.0 + 20.0;
  osc.frequency(freq * freq_ratio);
  
  // read knob @ pin 16 and set filter frequency
  float cutoff = map( readKnob(16), 0.0, 1023.0, 50.0, 12000.0 );
  filter1.frequency(cutoff);
  //Serial.println(cutoff);

  // read knob @ 17 and set the lfo rate
  float lfofreq = map( readKnob(17), 0.0, 1023.0, 0.2, 200.0 );
  lfo.frequency( lfofreq );


  // read the button 1 state
  button1.update();

  if ( button1.fallingEdge() ){
    
    // if button pressed, toggle the state
    button1State = !button1State;
    Serial.println("button 1 pressed!");
    Serial.println(button1State);

    // toggle the FM modulation on/off
    lfo2osc.gain(button1State);
  }
  
  // read button 2 state
  button2.update();

  if ( button2.fallingEdge() ){
    
    // if button pressed, toggle the state
    button2State = !button2State;
    Serial.println("button 2 pressed!");
    Serial.println(button2State);

    // toggle the filter cutoff modulation
    lfo2filter.gain(button2State);
  }


  // control thew LED brightness 
  // according to the LFO amplitude
  if ( rms1.available() ){

    // read the meter value as a float 0.0-1.0
    float value = rms1.read();
    int fadeValue = map(value, 0.0, 1.0, 0, 255);
    analogWrite(5, fadeValue);
  }

  
  // a small delay in the loop
  delay(5);  
}
